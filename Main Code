--This is where our main code will be at. Feel free to change a type of code if you feel like there's a better solution, but be sure to alert the members of your changes.

--Used to create the Career Guidance application database.
USE master
GO
CREATE DATABASE Career_Guidance_Application

USE Career_Guidance_Application
GO

--Creating the table System
CREATE TABLE System (
System_id INT PRIMARY KEY NOT NULL,
System_name CHAR(50) NOT NULL
);
--Creating the rest of the tables
CREATE TABLE Account (
	Account_id INT PRIMARY KEY NOT NULL,
	System_id INT FOREIGN KEY REFERENCES System (System_id) NOT NULL,
	Account_name char(50) NOT NULL,
	Date_of_birth DATE NOT NULL,
	Email_address VARCHAR(50) NOT NULL,
	Intrests CHAR(100) NOT NULL
);
CREATE TABLE School_Learner (
	Learner_id INT PRIMARY KEY NOT NULL,
	Account_id INT FOREIGN KEY REFERENCES Account (Account_id) NOT NULL,
	School_name CHAR(50) NOT NULL,
	School_grade INT NOT NULL
);
CREATE TABLE University_Student (
	Student_id INT PRIMARY KEY NOT NULL,
	Account_id INT FOREIGN KEY REFERENCES Account (Account_id) NOT NULL,
	University_name CHAR(50) NOT NULL,
	Year_of_study TINYINT NOT NULL,
	Mode_of_study CHAR(50) NOT NULL,
	Type_of_course VARCHAR(50) NOT NULL
);
CREATE TABLE Job_Seeker	(
	Identification_id INT PRIMARY KEY NOT NULL,
	Account_id INT FOREIGN KEY REFERENCES Account (Account_id) NOT NULL,
	Place_of_work CHAR(50) NOT NULL, 
	Income_earned MONEY NOT NULL,
	Qualifications_earned CHAR(50) NOT NULL
);
CREATE TABLE Non_Functional_Requirements (
	Programme_id INT PRIMARY KEY NOT NULL,
	System_id INT FOREIGN KEY REFERENCES System (System_id) NOT NULL,
	Programme_name CHAR(50) NOT NULL,
	Is_scalable BIT NOT NULL,
	Is_recoverable BIT NOT NULL,
	Is_secure BIT NOT NULL,
	Is_regulatory BIT NOT NULL,
	Is_available BIT NOT NULL,
	Is_capacity BIT NOT NULL
);
--adding constraint to avoid duplicate enteries in emails 
alter table Account 
 add constraint email_id UNIQUE (Account_id,Email_address);
 
 ---creating insert/delete/update/select procuders for the following tables Job_Seekers,Account,University_student,School_learner
 Use master
 go
create procedure [dbo].[Accountinsertupdatedelete]
                                                                                         (@A_id int,
											  @S_id int,
											  @name varchar(50),
											  @Dat_of_Birth date,
											  @email_address varchar(50),
											  @intrests varchar(100),
											  @StatmentType NVARCHAR(20)= '')
As
	begin
		if @StatmentType = 'Insert'
			begin
				insert into Account
							(Account_id,
							 System_id,
						     Account_name,
							 Date_of_birth,
							 Email_address,
							 Intrests)
				values (@A_id,
						@S_id,
						@name,
						@Dat_of_Birth,
						@email_address,
						@intrests)
			end

		if @StatmentType = 'Select'
			begin
				select *
				from Account
			end
		if @StatmentType = 'Update'
			begin
				UPDATE Account
				set Account_name = @name,
					System_id = @S_id,
					Date_of_birth = @Dat_of_Birth,
					Email_address = @email_address,
					Intrests = @intrests
				where Account_id = @A_id
			end
		else if @StatmentType = 'Delete'
			begin
				delete from Account
				where Account_id = @A_id
			end
		end;

Use master
 go

create procedure Job_Seekerinsertupdatedelete
                                                                                         (@A_id int,
											  @I_id int,
											  @placeofwork char(50),
											  @IncomeEarned money,
											  @QualificationEarned char(50),
											  @StatmentType NVARCHAR(20)= '')
As
	begin
		if @StatmentType = 'Insert'
			begin
				insert into Job_Seeker
							(Identification_id,
						     Account_id,
							 Place_of_work,
							 Income_earned,
							 Qualifications_earned)
				values (@I_id,
						@A_id,
						@placeofwork,
						@IncomeEarned,
						@QualificationEarned)
			end

		if @StatmentType = 'Select'
			begin
				select *
				from Job_Seeker
			end
		if @StatmentType = 'Update'
			begin
				UPDATE Job_Seeker
				set Account_id = @A_id,
					Place_of_work = @placeofwork,
					Income_earned = @IncomeEarned,
					Qualifications_earned = @QualificationEarned
				where Identification_id = @I_id
			end
		else if @StatmentType = 'Delete'
			begin
				delete from Job_Seeker
				where Identification_id = @I_id
			end
		end;

Use master
go

create procedure School_learnerinsertupdatedelete
                                                                                         (@A_id int,
											  @L_id int,
											  @schoolname char(50),
											  @schoolgrade int,
											  @StatmentType NVARCHAR(20)= '')
As
	begin
		if @StatmentType = 'Insert'
			begin
				insert into School_learner
							(Learner_id,
						     Account_id,
							 School_name,
							 School_grade)
				values (@L_id,
						@A_id,
						@schoolname,
						@schoolgrade)
			end

		if @StatmentType = 'Select'
			begin
				select *
				from School_learner
			end
		if @StatmentType = 'Update'
			begin
				UPDATE School_learner
				set Account_id = @A_id,
					School_name = @schoolname,
					School_grade = @schoolgrade
				where Learner_id = @L_id
			end
		else if @StatmentType = 'Delete'
			begin
				delete from School_learner
				where Learner_id = @L_id
			end
		end;

Use master
go

create procedure Universty_studentinsertupdatedelete
                                                                                         (@A_id int,
											  @S_id int,
											  @UniversityName char(50),
											  @yearofstudy tinyint,
											  @modeofstudy char (50),
											  @typeofcourse varchar (50),
											  @StatmentType NVARCHAR(20)= '')
As
	begin
		if @StatmentType = 'Insert'
			begin
				insert into University_student
							(Student_id,
						     Account_id,
							 University_name,
							 Year_of_study,
							 Mode_of_study,
							 Type_of_course)
				values (@S_id,
						@A_id,
						@UniversityName,
						@yearofstudy,
						@modeofstudy,
						@typeofcourse)
			end

		if @StatmentType = 'Select'
			begin
				select *
				from University_student
			end
		if @StatmentType = 'Update'
			begin
				UPDATE University_student
				set Account_id = @A_id,
					University_name = @UniversityName,
					Year_of_study = @yearofstudy,
					Mode_of_study = @modeofstudy,
					Type_of_course = @typeofcourse
				where Student_id = @S_id
			end
		else if @StatmentType = 'Delete'
			begin
				delete from University_student
				where Student_id = @S_id
			end
		end;

Use Career_Guidance_Application
go
create table System_Backup (
	Backup_id INT primary key not null,
    System_id INT NOT NULL,
	system_name CHAR(50) NOT NULL
);

CREATE TABLE Account_backup (
	Account_id INT PRIMARY KEY NOT NULL,
	System_id INT FOREIGN KEY REFERENCES System (System_id) NOT NULL,
	Account_name char(50) NOT NULL,
	Date_of_birth DATE NOT NULL,
	Email_address VARCHAR(50) NOT NULL,
	Intrests CHAR(100) NOT NULL
);
CREATE TABLE School_learner_backup (
	Learner_id INT PRIMARY KEY NOT NULL,
	Account_id INT FOREIGN KEY REFERENCES Account (Account_id) NOT NULL,
	School_name CHAR(50) NOT NULL,
	School_grade INT NOT NULL
);
CREATE TABLE University_student_backup (
	Student_id INT PRIMARY KEY NOT NULL,
	Account_id INT FOREIGN KEY REFERENCES Account (Account_id) NOT NULL,
	University_name CHAR(50) NOT NULL,
	Year_of_study TINYINT NOT NULL,
	Mode_of_study CHAR(50) NOT NULL,
	Type_of_course VARCHAR(50) NOT NULL
);
CREATE TABLE Job_Seeker_backup	(
	Identification_id INT PRIMARY KEY NOT NULL,
	Account_id INT FOREIGN KEY REFERENCES Account (Account_id) NOT NULL,
	Place_of_work CHAR(50) NOT NULL, 
	Income_earned MONEY NOT NULL,
	Qualifications_earned CHAR(50) NOT NULL
);
CREATE TABLE Non_Functional_Requirements_backup (
	Programme_id INT PRIMARY KEY NOT NULL,
	System_id INT FOREIGN KEY REFERENCES System (System_id) NOT NULL,
	Programme_name CHAR(50) NOT NULL,
	Is_scalable BIT NOT NULL,
	Is_recoverable BIT NOT NULL,
	Is_secure BIT NOT NULL,
	Is_regulatory BIT NOT NULL,
	Is_available BIT NOT NULL,
	Is_capacity BIT NOT NULL
);

create trigger backup_insert
	on system
	after insert as
	begin
		insert into System_backup (system_id, System_name)
		select system_id, System_name from inserted

		update System
		set Backup_id = MP.backup_id
		from System
		inner join inserted i on i.System_id = System.System_id
		inner join System_Backup MP on MP.System_id = System.System_id
	end
